name: Release

on:
  push:
    branches:
      - installer-script
  pull_request:
    branches:
      - installer-script

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install
        working-directory: ./electron-app

      - name: Build and Publish
        run: npm run release
        working-directory: ./electron-app

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ github.run_number }}"
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
          body: "Description of the release goes here"

      - name: Set Outputs
        id: set_outputs
        run: |
          echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV

  electron-release:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Electron Asset Path
        id: get_electron_asset_path
        run: |
          asset_path=$(find ./dist -type f -name '*.AppImage')
          if [ -n "$asset_path" ]; then
            echo "asset_path=$asset_path" >> $GITHUB_ENV
            echo "asset_name=$(basename $asset_path)" >> $GITHUB_ENV
          else
            echo "No asset found" >&2
            exit 1
          fi

      - name: Upload Electron Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.asset_path }}
          asset_name: ${{ env.asset_name }}
          asset_content_type: application/octet-stream

  installer-release:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Nuitka
        run: |
          python -m pip install --upgrade pip
          python -m pip install nuitka

      - name: Build Standalone Installer
        run: |
          python -m nuitka installer.py --standalone --onefile

      - name: Upload Installer Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ ./installer.bin }}
          asset_name: ${{ installer.bin }}
          asset_content_type: application/octet-stream
